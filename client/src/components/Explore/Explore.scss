@import "../../variables.scss";

#explorePage {
	.popover-cover {
		position: fixed;
		z-index: 1;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
	}

	.sortable-ghost {
		opacity: 0;
	}

	#childrenGrid {
		margin-top: $grid-gutter-width/2;
	}
	#content {
		padding-top: 50px;
		min-height: 100%;
	}

	.icon {
		margin: 0;
		background-size: cover;
	}
	.icon.spin,
	.icon.spinReverse {
		animation-duration: 5s;
	}
	.icon.text {
		line-height: 1em;
		font-weight: bold;
	}

	ul#description {
		padding: 0.5em 0.5em;
		margin-top: 1rem;
		list-style: none;
		line-height: 1.2em;
		font-size: 1rem;

		li {
			padding: 0.3em 0.5em;
		}

		li:focus {
			outline-color: currentColor;
		}

		input#newLine {
			background: transparent;
			border-top: 0;
			border-right: 0;
			border-left: 0;
			color: inherit;
			border-color: currentColor;

			&:focus {
				box-shadow: 0 0 0 1px;
			}
		}

		&.empty {
			opacity: 0.5;

			&:hover,
			&:focus-within {
				opacity: 1;
			}
		}
	}

	.description.alert-default {
		text-align: left;
		font-size: 1.3em;
		margin-top: -25px;
		margin-bottom: 30px;
		padding: 0;
	}

	i.gi {
		font-size: inherit;
	}

	.delay500 {
		transition-delay: 500ms;
	}

	@keyframes example {
		from {
			opacity: 0;
			transform: translateY(15px);
		}
		to {
			opacity: 1;
			transform: translateY(0px);
		}
	}

	// --------------------------------------------
	$yPadding: 0.75rem;
	$xPadding: 0.75rem;

	.child {
		text-shadow: none;
		font-weight: normal;
		padding: $xPadding !important;
		opacity: 0;

		&:not([class*="sortable-"]) {
			animation: example 500ms ease;
			animation-fill-mode: forwards;
		}

		&:hover,
		&:focus {
			color: inherit;
			background: inherit;
			text-decoration: none;
		}

		&a {
			text-decoration: none;
		}

		.child-inner {
			cursor: default;
			position: relative;
			text-align: center;
			white-space: pre-wrap;
			//display:table;
			border-radius: $border-radius-sm;
			background-position: center;
			overflow: hidden;
			box-sizing: border-box;

			width: 100%;
			height: 100%;
			padding: $yPadding $xPadding;

			.wrap {
				text-align: center;
				padding: 0;
				width: 100%;
				overflow: hidden;

				.icon {
					line-height: 1em;
					width: 100%;
				}

				h1,
				h2 {
					text-align: center;
					overflow: hidden;
					text-overflow: ellipsis;
					line-height: 1.3em;
				}
			}

			&.link {
				cursor: pointer;

				&:hover,
				&:focus,
				&:active,
				&:active:focus {
					opacity: 1;
					box-shadow: 0px 0px 5px !important;
				}

				.icon {
					font-size: 5rem;
					height: 5rem;
				}

				.wrap {
					h1 {
						display: block;
						font-weight: inherit;
						font-size: 1rem;
						margin: 0.5em 0 0 0;
					}
					h2 {
						font-size: 0.85rem;
						margin: 0;
					}
				}

				&:hover,
				&:focus {
					text-decoration: none;
					box-sizing: content-box;
					top: -$yPadding;
					left: -$xPadding;

					.wrap {
						padding: 0 $xPadding;
					}
				}
			}

			&.empty,
			&.no-icon {
				.wrap h1,
				.wrap .icon {
					display: inline;
					font-size: 1.4rem;
					font-weight: normal;
					margin: 0 0.25em;
				}
			}

			&.no-icon {
				.icon {
					display: none;
				}
			}

			&.empty {
				// so they don't look clickable
				background: transparent !important;
				color: inherit !important;
				white-space: pre-wrap;

				.icon {
					vertical-align: sub;
				}

				h2 {
					display: none;
				}
			}

			&.addNew {
				opacity: 0.25;
				overflow: visible;

				.icon {
					font-size: 2rem !important;
					height: 2rem !important;
				}
				h1 {
					display: none;
				}

				.wrap {
					overflow: visible;
				}

				&:hover,
				&.showAdd {
					opacity: 1;
				}

				&.showAdd {
					padding: 0;

					&:hover,
					&:focus {
						content-box: border-box;
						top: 0;
						left: 0;
						padding: 0;

						.wrap {
							padding: 0;
						}
					}
				}
			}
		} //.child-inner

		$linkHeight: 2.5rem;

		.linkLabel {
			position: absolute;
			top: $yPadding/2;
			left: $xPadding/2;
			padding: 0;
			z-index: 1;
			width: 5rem;
			height: $linkHeight;
			text-align: left;
			transition-duration: 500ms;
			transition-property: width, height, border-radius;
			transition-timing-function: ease;
			cursor: pointer;
			background-color: #000;

			> div:first-child {
				position: absolute;
				margin: 0 !important;
				top: -25%;
				left: -25%;
			}

			svg {
				display: none;
			}

			span {
				padding-left: 43px;
				line-height: $linkHeight;
			}
		}

		.deleteLink {
			display: block;
			position: absolute;
			top: 1rem;
			right: 0.25rem;
			z-index: 1;
		}

		&:hover {
			.linkLabel {
				width: 100%;
				height: 100%;
				border-radius: $border-radius-lg;
				text-align: center;

				> div:first-child {
					bottom: -40%;
					top: unset;
				}

				svg {
					display: block;
				}

				span {
					display: none;
				}
			}
		}
	} //.child ---------------------------------------------

	.example-enter {
		transition-delay: 1s;
		visibility: hidden;
		opacity: 0;
		height: 0px;
		width: 0px;
	}
	.example-enter.example-enter-active {
		opacity: 1;
		visibility: visible;
		height: auto;
		width: auto;
		transition: opacity 500ms ease-in;
		transition-delay: 1s;
	}

	.example-exit {
		opacity: 1;
	}

	.example-exit.example-exit-active {
		opacity: 0;
		transition: opacity 500ms ease-in;
	}

	.switch-enter {
		opacity: 0.01;
	}
	.switch-enter.switch-enter-active {
		opacity: 1;
		transition: opacity 0.5s ease-in;
	}
	.switch-exit {
		/* Completely hide the button while it's being animated and before it's removed from the DOM. */
		visibility: hidden;
		height: 0px;
		width: 0px;
		position: absolute;

		/* Starting opacity */
		opacity: 1;
	}
	.switch-exit.switch-exit-active {
		/* Ending opacity:
			Trigger opacity change so the "transitionend" event will fire, causing React to remove from the DOM. */
		opacity: 0;
		transition: opacity 0.5s ease-in;
	}

	/* Transition */
	.slide-up-appear,
	.slide-up-enter {
		opacity: 0;
		transform: translateY(15px);
		transition: all 500ms ease;
	}

	.slide-up-appear.slide-up-appear-active,
	.slide-up-enter.slide-up-enter-active {
		opacity: 1;
		transform: translateY(0px);
	}

	.slide-up-exit.slide-up-exit-active {
		display: none;
		transition-delay: 0 !important;
	}

	.fa[class^="flaticon-"]:before,
	.fa[class*=" flaticon-"]:before,
	.fa[class^="flaticon-"]:after,
	.fa[class*=" flaticon-"]:after {
		font-size: 1em;
		margin: 0;
	}

	.fake-disabled {
		textarea,
		input,
		select {
			background-color: #eee;
		}
	}

	.isaSelect {
		color: #000;
		text-align: left;
		font-size: 0.85rem;

		.text-option div {
			white-space: nowrap;
			overflow: hidden;
			text-overflow: ellipsis;
		}
	}
}

#patternSelectModal {
	.sample {
		height: 5rem;
		margin-bottom: $grid-gutter-width;
		padding: 0.5em;
		border: 1px solid currentColor;
		cursor: pointer;

		&:hover {
			border-radius: 1em;
		}
	}
}

.link {
	color: inherit;
}

.link[class*="bg-"] {
	color: var(--contrast);
}
