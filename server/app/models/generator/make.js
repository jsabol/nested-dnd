
const Nested = require('../../routes/packs/nested');

var Maker = {

	/**
	 * Make a thing that could be a tableid, a table, or a string
	 * @param  {string} options.type  tableid, table, or string
	 * @param  {Object|string} options.value the thing
	 * @param  {Table} Table         the table schema
	 * @return {string}              the random value
	 */
	makeMixedThing: async function(thing, Table){
		if(typeof thing === "string" || !thing) 
			return thing;

		var {type, value} = thing;
		if(type === undefined || value === undefined || value === null)
			return value;

		switch(type){
			case "table_id":
				var table = await Table.findById(value); // TODO
				return await table.roll();
				break;
			case "table":
				if(typeof value === 'object'){
					var table = new Table(value);
					return await table.roll(); // TODO: roll
				}
				else {
					console.error("Data needs cleanup - table should not be a string: ");
					console.error(thing.$parent._doc);
				}
				break;
		}
		return value;
	},

	/**
	 * Creates a random version of a generator
	 * @param  {Object|Generator} gen         the generator 
	 * @param  {Integer} generations the number of nested levels to generate
	 * @param  {BuiltPack} builtpack        the compiled built pack with combined definitions of generators to use
	 * @param {Object} node the pre-existing node that we are generating children for
	 * @return {Nested}             the node that will be passed to the user
	 */
	make: async function(gen, generations, builtpack, node){
		if(!gen){
			console.trace("gen cannot be undefined");
			throw new Error("make(): gen cannot be undefined");
		}
		if(isNaN(generations) || generations < 0) generations = 0;

		//make into a Generator obj if not
		if(!gen.save){
			var Generator = builtpack.model('Generator');
			gen = new Generator(gen)
		}
		gen = gen.extend(builtpack);

		// make a new node if doesn't exist yet
		if(!node){
			var name = await gen.makeName;
			var style = await gen.makeStyle;

			node = new Nested(name, gen, style);
		}
		
		// in ---------------------------------------------
		if(generations && gen.in && gen.in.length){
			var madeChildren;

			await Promise.all(gen.in.map((c)=>{
				return this.makeChild(c, builtpack, generations-1);
			})).then(result=>madeChildren=result);

			//flatten madeChildren into single array
			var flatArray = [];
			madeChildren.forEach((child)=>{
				if(child instanceof Array){
					flatArray = flatArray.concat(child);
				}
				else if(child){
					flatArray.push(child);
				}
			});

			node.in = flatArray;

			if(!madeChildren || madeChildren.length === 0){
				node.isEmpty = true;
			}
		}

		return node;
	},

	/**
	 * Processes the type of a child to randomly generate it
	 * @param  {Object} child       childSchema
	 * @param  {BuiltPack} builtpack   the compiled pack
	 * @param  {Integer} generations the number of nested levels to generate
	 * @return {Object[]}             an array of nodes that was generated by this child
	 */
	makeChild: async function(child, builtpack, generations){
		var Table = builtpack.model('Table');
		var Generator = builtpack.model('Generator');
		var Maker = this;

		// check chance
		if(!child.isIncluded) return null;


		const amount = child.makeAmount;
		
		var {gen,table} = await checkTypes(child, Table, builtpack);

		var arr = await makeAmount(gen, table, child.value, amount);

		return arr;

		async function makeAmount(gen, table, value, amount){
			var arr = [];
			for(var i = 0; i < amount; i++){
				if(gen){
					arr.push(await Maker.make(gen, generations, builtpack))
				}
				else if(table){
					var result = await table.roll();
					if(typeof result === undefined){
						continue;
					}

					var { gen: newGen, table: newTable } = await checkTypes(result, Table, builtpack);
					var newAmount = 1;
					if(typeof result === 'object') { // got back a child
						var result = new Generator({in: [ result ]}).in[0];
						newAmount = result.makeAmount;
						result = result.value;
					}

					arr = arr.concat(await makeAmount(newGen, newTable, result, newAmount));
				}
				else if(value){
					arr.push({ 
						name: value,
						up: [],
						in: false
					});
				}
			}
			return arr;
		}
	}
}

async function checkTypes(child, Table, builtpack){
	var gen, table; 

	if(child.type === "table"){
		if(typeof child.value !== 'object'){
			console.error("Data needs cleanup - table should not be a string: ");
			console.error(child.parent()._doc);
		}
		else
			table = new Table(child.value)
	}
	else if(child.type === "table_id"){
		table = await Table.findById(child.value)
	}
	else if(child.type === "generator"){
		gen = builtpack.getGen(child.value)
	}
	else if(child.type === 'embed'){ // embed or string
		gen = child.value;
	}
	return {gen, table};
}

module.exports = Maker;